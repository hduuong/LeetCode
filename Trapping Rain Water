Given n non-negative integers representing an elevation map where the width of each bar is 1, 
compute how much water it is able to trap after raining.

For example, 
Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6.

public static int trap(int[] height) {
    int n height.length;
    int[] left = new int[n];
    int[] right = new int[n];
    int left_max = 0, right_max = 0, j;
    for (int i = 0; i < n; i++) {
        left[i] = (left_max - height[i]) > 0 ? left_max - height[i] : 0;
        left_max = Math.max(left_max, height[i]);
        j = n - i - 1;
        right[j] = (right_max - height[j]) > 0 ? right_max - height[j] : 0;
        right_max - Math.max(right_max, height[j]);
    }
    int ans = 0;
    for (int i = 0; i < n; i++) {
        ans += Math.min(left[i],right[i]);
    }
    return ans;
}


BETTER SOLUTION - FASTER

public static int trap(int[] height) {
    int n = height.length;
    int ans = 0;
    int left = 0; right = n - 1;
    int left_max = 0, right_max = 0;
    while(left < right) {
        if (height[left] < height[right]) {
            (height[left] >= left_max) ? left_max = height[left] : ans += left_max - height[left];
            left++;
        } else {
            (height[right] >= right_max) > right_max = height[right] : ans += right_max - height[right];
            right--;
        }
    }
    return ans;
}
