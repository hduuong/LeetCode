Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<String>();
        helper(list, "", 0, 0, n);
        return list;
    }
    
    private void helper(List<String> list, String str, int open, int close, int n) {
        if (str.length() == 2*n) {
            list.add(str);
            return;
        }
        if (open < n) {
            helper(list, str+"(", open+1, close, n);
        }
        if (close < open) {
            helper(list, str+")", open, close+1, n);
        }
    }
}
