Write a function to find the longest common prefix string amongst an array of string.

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";
        return longestCommonPrefix(strs, 0, strs.length - 1);
    }
    
    private String longestCommonPrefix(String[] strs, int l, int r) {
        if (l==r) {
            return strs[l];
        } else {
            int mid = (l+r)/2;
            String left = longestCommonPrefix(strs, l, mid);
            String right = longestCommonPrefix(strs, mid+1, r);
            return commonPrefix(left, right);
        }
    }
    
    private String commonPrefix(String s1, String s2) {
        int min = Math.min(s1.length(), s2.length());
        
        for (int i = 0; i < min; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                return s1.substring(0, i);
            }
        }
        return s1.substring(0, min);
    }
}


FOLLOW UP. a way better solution is to implement a TRIE, that makes look up for longest common prefix faster.
The tradeoff is the cost of building a trie, which is O(S) where S is the total character in the array. 
----------> See Implement Trie in LeetCode folder
