Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

class Solution {
    public ListNode mergeLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        if (lists.length() == 1) return lists[0];
        return helper(lists, 0, lists.length - 1);
    }
    
    private ListNode helper(ListNode[] lists, int lo, int hi) {
        if (lo == hi) return lists[lo];
        else if (lo < hi) {
            int mid = (lo+hi)/2;
            ListNode l1 = helper(lists, lo, mid);
            ListNode l2 = helper(lists, mid+1, hi);
            return merge2Lists(l1,l2);
        } else {
            return null;
        }
    }
    
    
    private ListNode merge2Lists(ListNode l1, ListNode l2) {
        if (l1 == null && l2 == null) return null;
        if (l1 == null) return l2;
        if (l2 ==  null) return l1;
        
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        while(l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }
        
        if (l1 != null) current.next = l1;
        else if (l2 != null) current.next = l2;
        
        return dummy.next;
    }
}
