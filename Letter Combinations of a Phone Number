Given a digit string, return all possible letter combinations that the number could represent.

Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Method: FIFO. (similar to BFS)

public static List<String> letterCombincations(String digits) {
    List<String> res = new LinkedList<String>();
    if (digits == null || digits.length() == 0) return res;
    String[] map = new String[] {"0", "1", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wyz"}
    res.add("");
    for (int i = 0; i < digits.length(); i++) {
        int x = Character.getNumericValue(digits.charAt(i));
        while(ans.peek().length() == i) {
            String t = res.remove();
            for (char s : map[x].toCharArray()) {
                ans.add(t+s);
            }
        }
    }
    return res;
}
