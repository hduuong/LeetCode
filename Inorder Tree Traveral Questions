Binary Tree Inorder Traversal

public List<Integer> inorderTraversal(TreeNode root) {
    List<Integer> res = new ArrayList<>();
    if (root == null) return res;
    Stack<TreeNode> s = new Stack<>();
    while (root != null || !s.isEmpty()) {
        while (root != null) {
            s.push(root);
            root = root.left;
        }
        root = s.pop();
        res.add(root.val);
        root = root.right;
    }
    return res;
}   


Kth Smallest Element in BST

public int kthSmallestElement(TreeNode root, int k) {
    if (root == null) return 0;
    Stack<TreeNode> s = new Stack<>();
    while (root != null || !s.isEmpty()) {
        while(root != null) {
            s.push(root);
            root = root.left;
        }
        root = s.pop();
        if (--k == 0) break;
        root = root.right;
    }
    return root != null ? root.val : 0;
}


Valid BST

public boolean validBST(TreeNode root) {
    if (root == null) return true;
    Stack<TreeNode> s = new Stack<>();
    TreeNode prevNode = null;
    While (root != null || !stack.isEmpty()) {
        while(root != null) {
            s.push(root);
            root = root.left;
        }
        root = s.pop();
        if (prevNode != null && root.val <= prevNode.val) return false;
        prevNode = root;
        root = root.right;
    ]
    return true;
}
