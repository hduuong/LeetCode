Give an array of integers, return indices of the two numbers such that they add up to a specific target

You may assume that each input would have exactly one solution, and you may not use the same element twice

Example:
Given nums = [2, 7, 11, 15], target = 9
Because nums[0] + nums[1] = 2 + 7 = 9
return [0,1]

/**
 * brute force
 * Time: O(n^2)
 * Space: O(1)
 */
public static int[] twoSum(int[] nums, int target) {
    for (int i = 0; i < nums.length - 1; ++i) {
        int v = target - nums[i];
        for (int j = i + 1; j < nums.length; ++j) {
            if (nums[j] == v) {
                return new int[]{i,j};
            }
        }
    }
    return new int[2];
}

/**
 * One-pass Hash Table
 * Time: O(n)
 * Space: O(n)
 */
public static int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; ++i) {
        int v = target - nums[i];
        if (map.containsKey(v)) {
            return new int[]{map.get(v), i};
        }
        map.put(nums[i], i);
    }
    return new int[2];
}
