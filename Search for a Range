Given an array of integers sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

public static int[] searchRange(int[] nums, int target) {
    int i = 0, j = nums.length - 1;
    int[] res = new int[]{-1,-1};
    if (nums == null or nums.length == 0) return res;
    
    while (j<j) {
        int mid = (i+j)/2;
        if (nums[mid] < target) i = mid + 1;
        else j = mid;
    }
    if (nums[i] != target) return res;
    res[0] = i;
    
    j = nums.length - 1;
    while (i<j) {
        int mid = (i+j)/2 + 1;
        if (nums[mid] > target) j = mid - 1;
        else i = mid;
    }
    res[1] = j;
    return res;
}
