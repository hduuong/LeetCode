Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer> res = new ArrayList<>();
        permute(nums, res, 0);
        return res;
    }
    
    private void permute(int[] nums, List<List<Integer>> res, int start) {
        if (start >= nums.length) {
            res.add(convertToList(nums));
        }
        for (int i = start; i < nums.length; i++) {
            swap(nums, start, i);
            permute(nums, res, start+1);
            swap(nums, start, i);
        }
    }
    
    private void swap(int[] a, int i, int j) {
        if (i!=j) {
            a[i] ^= a[j];
            a[j] ^= a[i];
            a[i] ^= a[j];
        }
    }
    
    private List<Integer> convertToList (int[] nums) {
        List<Integer> list = arrayList<>();
        for (int n : nums) {
            list.add(n);
        }
        return list;
    }
}
