Given an unsorted integer array, find the first missing positive integer.

For example,
Given [1,2,0] return 3,
and [3,4,-1,1] return 2.

Your algorithm should run in O(n) time and uses constant space.

Concept: iterate the first time to put the number in the correct place.
iterate the second time to find the first out of place index => return that index+1 as the answer
Example [3,4,-1,1] => [1,-1,3,4] after the first iteration. Then it is obvious that at index 1 which is 2 is the missing positive

public class Solution {
    public int firstMissingPositive(int[] nums) {
        int n = nums.length;
        for(int i = 0; i < n; i++) {
            while(nums[i] > 0 && nums[i] <= n && nums[nums[i]-1] != nums[i])
                swap(nums, i, nums[i] - 1); 
        }
        
        
        for(int i = 0; i < n; i++) {
            if (nums[i] != i+1) return i+1;
        }
        return n+1;
    }
    
    private void swap(int[] nums, int i, int j) {
        if (i!=j) {
            nums[i]^=nums[j];
            nums[j]^=nums[i];
            nums[i]^=nums[j];
        }
    }
}
